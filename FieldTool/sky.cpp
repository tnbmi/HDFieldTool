//*****************************************************************************
//
// CSkyクラス [sky.h]
// Author :MAI TANABE
//
//*****************************************************************************

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// インクルードファイル
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#include "sky.h"

#include "scene2D.h"
#include "import.h"

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// マクロ
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#define SKY_LEFT	(-SCREEN_WIDTH)
#define SKY_RIGHT	(SCREEN_WIDTH * (SKY_MAX - 1))

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// 静的変数
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//=============================================================================
// コンストラクタ
//=============================================================================
CSky::CSky(void)
{
}

//=============================================================================
// 生成
//=============================================================================
CSky* CSky::Create(LPDIRECT3DDEVICE9 device)
{
	CSky* pointer = new CSky;
	pointer->Init(device);
	return pointer;
}

//=============================================================================
// 初期化
//=============================================================================
HRESULT CSky::Init(LPDIRECT3DDEVICE9 device)
{
	// 空背景色
	//m_bgcolor = CScene2D::Create(device, CImport::SKY_BG, CScene2D::POINT_LEFTTOP, 0);
	//m_bgcolor->SetSize(SCREEN_WIDTH, SCREEN_HEIGHT);
	//m_bgcolor->SetPos(0.0f, 0.0f);

	// 空
	for(int cnt = 0; cnt < SKY_MAX; ++cnt)
	{
		m_sky[cnt] = CScene2D::Create(device, (CImport::TEXTURES)(CImport::SKY1 + cnt), CScene2D::POINT_LEFTTOP, 0);
		m_sky[cnt]->SetSize(SCREEN_WIDTH, SCREEN_HEIGHT);
		m_sky[cnt]->SetPos(((float)SCREEN_WIDTH - 0.01f) * cnt, 0.0f);
	}
	return S_OK;
}

//=============================================================================
// 終了
//=============================================================================
void CSky::Uninit(void)
{
}

//=============================================================================
// 更新
//=============================================================================
void CSky::Update(void)
{
	Scroll(0.2f);
}

//=============================================================================
// スクロール
//=============================================================================
void CSky::Scroll(float scroll)
{
	for(int cnt = 0; cnt < SKY_MAX; ++cnt)
	{
		float skyScroll = m_sky[cnt]->GetPos().x - scroll;

		if(skyScroll < SKY_LEFT)
		{
			skyScroll = SKY_RIGHT - (SKY_LEFT - skyScroll);
		}
		else if(skyScroll > SKY_RIGHT)
		{
			skyScroll = SKY_LEFT - (skyScroll - SKY_RIGHT);
		}

		m_sky[cnt]->SetPosX(skyScroll);
	}
}
